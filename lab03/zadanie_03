#!/bin/bash

# Funkcja do wyświetlania komunikatów
info() {
  echo -e "\n\033[1;34m[$1]\033[0m $2"
}

# Konfiguracja
NGINX_CONTAINER="nginx-proxy"
NODE_CONTAINER="node-app"
NGINX_PORT=80
SSL_DIR="./nginx-ssl"
CACHE_DIR="./nginx-cache"
NGINX_CONFIG_DIR="./nginx-config"
NODE_APP_DIR="./node-app"

# Tworzenie katalogów, jeśli nie istnieją
mkdir -p $SSL_DIR $CACHE_DIR $NGINX_CONFIG_DIR $NODE_APP_DIR
chown -R $(id -u):$(id -g) $CACHE_DIR

# Generowanie certyfikatu SSL, jeśli nie istnieje
if [ ! -f "$SSL_DIR/nginx-selfsigned.crt" ]; then
  openssl req -x509 -nodes -days 365 -newkey rsa:2048 \
    -keyout $SSL_DIR/nginx-selfsigned.key \
    -out $SSL_DIR/nginx-selfsigned.crt \
    -subj "/C=US/ST=State/L=City/O=Organization/CN=localhost"
  info "SSL" "Wygenerowano certyfikat SSL"
fi

# Tworzenie konfiguracji Nginx
cat <<EOL > $NGINX_CONFIG_DIR/nginx.conf
server {
    listen 80;
    listen 443 ssl;
    server_name localhost;

    ssl_certificate /etc/nginx/ssl/nginx-selfsigned.crt;
    ssl_certificate_key /etc/nginx/ssl/nginx-selfsigned.key;

    location / {
        proxy_pass http://node-app:3000;
        proxy_set_header Host \$host;
        proxy_set_header X-Real-IP \$remote_addr;
        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;

        proxy_cache my_cache;
        proxy_cache_valid 200 10m;
    }
}
EOL
info "KONFIGURACJA" "Utworzono konfigurację Nginx"

# Tworzenie aplikacji Node.js
cat <<EOL > $NODE_APP_DIR/server.js
const http = require('http');
const server = http.createServer((req, res) => {
  res.writeHead(200, { 'Content-Type': 'text/plain' });
  res.end('Hello from Node.js!');
});
server.listen(3000, () => console.log('Node.js app running on port 3000'));
EOL
info "NODE" "Utworzono aplikację Node.js"

# Tworzenie Dockerfile dla aplikacji Node.js
cat <<EOL > $NODE_APP_DIR/Dockerfile
FROM node:14
WORKDIR /app
COPY server.js .
CMD ["node", "server.js"]
EOL

# Tworzenie sieci Docker
info "DOCKER" "Tworzenie sieci Docker"
docker network create my-network

# Uruchamianie aplikacji Node.js w kontenerze
info "DOCKER" "Uruchamianie kontenera Node.js"
docker build -t node-app $NODE_APP_DIR
docker run -d --name $NODE_CONTAINER --network my-network node-app

# Uruchamianie kontenera Nginx
info "DOCKER" "Uruchamianie kontenera Nginx"
docker run -d --name $NGINX_CONTAINER --network my-network -p 80:80 -p 443:443 \
  -v $(pwd)/$NGINX_CONFIG_DIR/nginx.conf:/etc/nginx/nginx.conf:ro \
  -v $(pwd)/$SSL_DIR:/etc/nginx/ssl:ro \
  -v $(pwd)/$CACHE_DIR:/var/cache/nginx \
  nginx

# Testowanie dostępności aplikacji
sleep 5
info "TEST" "Sprawdzanie dostępności aplikacji Node.js"
curl -s http://localhost:3000 | grep -q "Hello from Node.js" && info "TEST" "Aplikacja Node.js działa" || echo -e "\n\033[1;31m[ERROR]\033[0m Aplikacja Node.js nie działa"

info "TEST" "Sprawdzanie dostępności reverse proxy"
curl -s http://localhost | grep -q "Hello from Node.js" && info "TEST" "Reverse proxy działa poprawnie" || echo -e "\n\033[1;31m[ERROR]\033[0m Reverse proxy nie działa"

info "ZAKOŃCZENIE" "Testy zakończone. Reverse proxy i aplikacja działają."

echo -e "Aby zatrzymać kontenery, wykonaj: docker stop $NGINX_CONTAINER $NODE_CONTAINER"
echo -e "Aby usunąć kontenery, wykonaj: docker rm $NGINX_CONTAINER $NODE_CONTAINER"
echo -e "Aby usunąć sieć, wykonaj: docker network rm my-network"
